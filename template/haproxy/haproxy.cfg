#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log ${LOG_PATH}    local0
    log ${LOG_PATH}    local1 notice

    chroot ${HAPROXY_CHROOT_PATH}
    # pidfile     /var/run/haproxy.pid
    # maxconn     4000
    # user        haproxy
    # group       haproxy
    daemon

    # turn on stats unix socket
    # stats socket /var/lib/haproxy/stats
    stats socket ${HAPROXY_STATS_SOCKET_PATH} mode 660 level admin
    # utilize system-wide crypto-policies
    ssl-dh-param-file ${HAPROXY_DH_PARAM_FILE}
    # ssl-default-bind-ciphers PROFILE=SYSTEM
    # ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
#     option http-server-close
#     option forwardfor       except 127.0.0.0/8
#     option                  redispatch
#     retries                 3
#     timeout http-request    10s
#     timeout queue           1m
    timeout connect         5000
    timeout client          50000
    timeout server          50000
#     timeout http-keep-alive 10s
#     timeout check           10s
#     maxconn                 3000
    errorfile 400 ${HAPROXY_ERROR_FILE_PATH}/400.http
    errorfile 403 ${HAPROXY_ERROR_FILE_PATH}/403.http
    errorfile 408 ${HAPROXY_ERROR_FILE_PATH}/408.http
    errorfile 500 ${HAPROXY_ERROR_FILE_PATH}/500.http
    errorfile 502 ${HAPROXY_ERROR_FILE_PATH}/502.http
    errorfile 503 ${HAPROXY_ERROR_FILE_PATH}/503.http
    errorfile 504 ${HAPROXY_ERROR_FILE_PATH}/504.http
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
# frontend main
#     bind *:5000
#     acl url_static       path_beg       -i /static /images /javascript /stylesheets
#     acl url_static       path_end       -i .jpg .gif .png .css .js

#     use_backend static          if url_static
#     default_backend             app
frontend v1_ssl_proxy
    bind *:${HAPROXY_PORT} ssl crt ${HAPROXY_SSL_PEM}
    mode https
    use_backend v1_ssl_server if { ssl_fc_sni <COLLECTOR_DOMAIN> }
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
# backend static
#     balance     roundrobin
#     server      static 127.0.0.1:4331 check
backend v1_ssl_server
    stats enable
    stats uri /admin

    option http-server-close
    option forwardfor header X-Real-Ip
    balance roundrobin
    cookie SERVERID insert indirect nocache
${BACKENDS}
#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
# backend app
#     balance     roundrobin
#     server  app1 127.0.0.1:5001 check
#     server  app2 127.0.0.1:5002 check
#     server  app3 127.0.0.1:5003 check
#     server  app4 127.0.0.1:5004 check
